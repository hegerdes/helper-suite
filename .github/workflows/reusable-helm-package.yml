name: Build-and-Publish-Helm-Chart

on:
  workflow_call:
    inputs:
      chart-repo:
        description: "The repo to clone and build"
        default: ${{ github.repository }}
        type: string
        required: false
      chart-sources-dir:
        description: "The build context path"
        default: charts
        type: string
        required: true
      chart-publish:
        description: "If chart shoud be upladed"
        default: true
        type: boolean
        required: false
      chart-devel-version:
        description: "If specified, sets either the value to chart devel version or the commit hash"
        type: string
        default: "false"
        required: false
      chart-lint:
        description: "If charts should be linted with helm/chart-testing"
        type: boolean
        default: true
        required: false
      chart-lint-extra-args:
        description: "Extra args passed to chart-testing lint"
        type: string
        default: ""
        required: false
      chart-test:
        description: "If charts should be tested with helm/chart-testing"
        type: boolean
        default: true
        required: false
      chart-test-extra-args:
        description: "Extra args passed to chart-testing install"
        type: string
        default: ""
        required: false
      chart-test-config-dir:
        description: "Path to the directory containing config.yaml, chart_schema.yaml and lintconf.yaml"
        type: string
        default: charts
        required: false
      chart-test-kind-version:
        description: "The kind version to use (default: v0.19.0)"
        type: string
        required: false
        default: "v0.20.0"
      chart-release-version:
        description: "Charts Release-version"
        type: string
        required: true
      app-release-version:
        description: "App Release-version"
        type: string
        default: ""
        required: false
      publish-to-gh-pages:
        description: "Publish chart to gh pages. Default true"
        type: boolean
        default: true
        required: false
      oci-registry-uri:
        description: "OCI registry URI"
        default: ""
        type: string
        required: false
      oci-registry-repo:
        description: "OCI registry repository name"
        default: ""
        type: string
        required: false
      extra-envs:
        description: "Extra envs passed to the runner. Format: VAR1=VAL1;VAR2=VAL2..."
        default: ""
        type: string
        required: false
      extra-commands:
        description: "Extra commands run in the workflow"
        default: ""
        type: string
        required: false
      runner:
        description: "The GH-Runner to use"
        default: "ubuntu-latest"
        type: string
        required: false
      environment:
        description: "GitHub Environment"
        default: "default"
        type: string
        required: false
    secrets:
      AZURE_CLIENT_ID:
        description: "Azure OAuth2 ClientId"
        required: false
      AZURE_TENANT_ID:
        description: "Azure AD Tenant"
        required: false
      AZURE_SUBSCRIPTION_ID:
        description: "Azure SubscriptionId"
        required: false
      OCI_REGISTRY_USER:
        description: "Container Registry User"
        required: false
      OCI_REGISTRY_TOKEN:
        description: "Container Registry PW/Token"
        required: false
      MASK_ENVS:
        description: "Extra envs passed to the runner. Format: VAR1=VAL1;VAR2=VAL2..."
        required: false

jobs:
  lint-and-test-chatrs:
    if: inputs.chart-lint || inputs.chart-test
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    env:
      CT_BUILD_ID: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Update helm dependencies
        run: |
          find ${{ inputs.chart-test-config-dir }} -maxdepth 1 -regextype egrep -regex '.*ya?ml$' -exec cp -v {} . \;
          helm dependency update ${{ inputs.chart-sources-dir }}
          helm package ${{ inputs.chart-sources-dir }}

      - name: Run chart-testing (lint)
        if: inputs.chart-lint
        run: |
          ct lint --target-branch ${{ github.event.repository.default_branch }} \
            --charts ${{ inputs.chart-sources-dir }} ${{ inputs.chart-lint-extra-args }}

      - name: Create kind cluster ${{ inputs.chart-test-kind-version }}
        if: inputs.chart-test
        uses: helm/kind-action@v1.8.0
        with:
          version: ${{ inputs.chart-test-kind-version }}

      - name: Run chart-testing (install)
        if: inputs.chart-test
        run: |
          ct install --target-branch ${{ github.event.repository.default_branch }} \
            --charts ${{ inputs.chart-sources-dir }} ${{ inputs.chart-test-extra-args }}

  build-and-publish-charts:
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.chart-repo }}
          fetch-depth: 0

      - name: Set ENVs
        id: env-setup
        run: |
          echo "CHART_NAME=$(echo ${{ inputs.chart-sources-dir }} | tr / -)" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          for MY_VAR in $(echo "${{ inputs.extra-envs }}" | tr ";" "\n"); do
            echo "$MY_VAR" >> $GITHUB_ENV
            echo "$MY_VAR" >> $GITHUB_OUTPUT
          done
          for MY_VAR in $(echo "${{ secrets.MASK_ENVS }}" | tr ";" "\n"); do
            echo "$MY_VAR" >> $GITHUB_ENV
            echo "$MY_VAR" >> $GITHUB_OUTPUT
          done
          if [ "$AZURE_CLIENT_ID" != "" ]; then
            echo "AZ_LOGIN_SET=yes" >> "$GITHUB_OUTPUT"
          fi
          if [ "$APP_RELEASE_VERSION" == "" ]; then
            echo "APP_RELEASE_VERSION=${{ inputs.chart-release-version }}" >> "$GITHUB_OUTPUT"
          fi
          if [ "$CHART_DEVEL_VERSION" != "false" ]; then
            if [ "$CHART_DEVEL_VERSION" != "false" ]; then
              echo "CHART_DEVEL_VERSION_POSTFIX=-$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
            else
              echo "CHART_DEVEL_VERSION_POSTFIX=-${{ inputs.chart-devel-version }}" >> "$GITHUB_OUTPUT"
            fi
            echo "Dev version set"
          fi
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          APP_RELEASE_VERSION: ${{ inputs.app-release-version }}
          CHART_DEVEL_VERSION: ${{ inputs.chart-devel-version }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in with Azure
        if: steps.env-setup.outputs.AZ_LOGIN_SET == 'yes'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to OCI Registry
        if: inputs.oci-registry-uri != '' && inputs.chart-publish
        run: |
          echo "Will login to ${{ inputs.oci-registry-uri }}"
          echo ${{ secrets.OCI_REGISTRY_TOKEN }} | helm registry login -u ${{ secrets.OCI_REGISTRY_USER }} --password-stdin ${{ inputs.oci-registry-uri }}

      - name: Run passed commands
        run: bash -c "${{ inputs.extra-commands }}"

      - name: Package Charts
        run: |
          # Package charts
          mkdir -p charts/.ci-build
          echo "Setting chart version to ${{ inputs.chart-release-version }}${{ steps.env-setup.outputs.CHART_DEVEL_VERSION_POSTFIX }} and app version to ${{ steps.env-setup.outputs.APP_RELEASE_VERSION }}${{ steps.env-setup.outputs.CHART_DEVEL_VERSION_POSTFIX }}"
          helm dependency update ${{ inputs.chart-sources-dir }}
          helm lint ${{ inputs.chart-sources-dir }}
          helm package ${{ inputs.chart-sources-dir }} --version ${{ inputs.chart-release-version }}${{ steps.env-setup.outputs.CHART_DEVEL_VERSION_POSTFIX }} --app-version ${{ steps.env-setup.outputs.APP_RELEASE_VERSION }}${{ steps.env-setup.outputs.CHART_DEVEL_VERSION_POSTFIX }} --destination charts/.ci-build
          # Sleep random time to avoid gh-pages race condition
          sleep $(( $RANDOM % 32))
          git fetch --all

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart-${{ steps.env-setup.outputs.CHART_NAME }}-${{ inputs.chart-release-version }}
          path: charts/.ci-build/*
          retention-days: 60

      - name: Push to OCI Registry
        working-directory: charts/.ci-build
        if: inputs.oci-registry-uri != '' && inputs.chart-publish
        run: |
          echo "Will push these charts:"
          ls -l *.tgz
          helm push *.tgz oci://${{ inputs.oci-registry-uri }}/${{ inputs.oci-registry-repo }}

      - name: Publish to GH-Pages
        uses: helm/chart-releaser-action@v1.6.0
        if: inputs.publish-to-gh-pages && inputs.chart-publish
        id: ghpublish
        with:
          skip_packaging: true
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CR_PACKAGE_PATH: charts/.ci-build
          CR_SKIP_EXISTING: "true"

      - name: Cleanup GH-Release
        if: ${{ failure() && steps.ghpublish.conclusion == 'failure' }}
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          # See: https://github.com/actions/toolkit/tree/main/packages/core#actionscore
          script: |
            const chart_sources_dir = process.env.CHART_SOURCES_DIR
            const chart_version = process.env.CHART_VERSION
            const tag = chart_sources_dir.split('/').pop() + '-' + chart_version
            const owner = process.env.GITHUB_REPOSITORY_OWNER
            const repo = process.env.GITHUB_REPOSITORY.split('/').pop()
            const headers = { 'X-GitHub-Api-Version': '2022-11-28' }
            const default_params = { owner: owner, repo: repo, headers: headers }

            let res = await github.request('GET /repos/{owner}/{repo}/releases/tags/{tag}', { ...default_params, tag: tag })

            if (res.status === 200) {
              console.log('Release found. Will try to delete it')
              res = await github.request('DELETE /repos/{owner}/{repo}/releases/{release_id}', { ...default_params, release_id: res.data.id, })

              if (res.status !== 204) {
                console.error('Release could not be deleted')
                process.exit(1)
              }

              console.log('Release deleted')
            }
        env:
          CHART_SOURCES_DIR: ${{ inputs.chart-sources-dir }}
          CHART_VERSION: ${{ inputs.chart-release-version }}

      - name: Azure Logout
        if: (success() || failure()) && steps.env-setup.outputs.AZ_LOGIN_SET == 'yes'
        continue-on-error: true
        run: |
            az logout
            az cache purge
            az account clear
